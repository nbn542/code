#include<iostream> 
#include<graphics.h> 
#include<math.h> 
using namespace std; 
void drawcircle(int xc, int yc, int r) 
{ 
int d=3-2*r; 
int x=0; 
int y=r; 
while (y >= x) 
{ 
putpixel(xc+x,yc+y,15); 
putpixel(xc+y,yc+x,15); 
putpixel(xc+y,yc-x,15); 
putpixel(xc+x,yc-y,15); 
putpixel(xc-x,yc-y,15); 
putpixel(xc-y,yc-x,15); 
putpixel(xc-y,yc+x,15); 
putpixel(xc-x,yc+y,15); 
x++; 
if (d>0) 
{ 
y--; 
d=d+4*(x-y)+10; 
} 
else 
{ 
d=d+4*x+6; 
} 
delay(10); 
} 
} 
void drawline(float x1,float y1,float x2,float y2) 
{ 
float dx,dy,steps,x,y,xinc,yinc; 
dx=abs(x2-x1); 
dy=abs(y2-y1); 
if(dx>dy) 
steps=dx; 
else 
steps=dy; 
xinc=(x2-x1)/steps; 
yinc=(y2-y1)/steps; 
x=x1; 
y=y1; 
putpixel(round(x),round(y),15); 
for(int k=0;k<steps;k++) 
{ 
x=x+xinc; 
y=y+yinc; 
putpixel(round(x),round(y),15); 
} 
} 
int main() 
{ 
int gd=DETECT, gm; 
initgraph(&gd,&gm,NULL); 
int x,y,r; 
float x1,y1,x2,y2,x3; 
cout<<"ENTER COORDINATES : "; 
cout<<"X1 : "; 
cin>>x1; 
cout<<"Y1 : "; 
cin>>y1; 
cout<<"X2 : "; 
cin>>x2; 
x3=(x2+x1)/2; // x-coordinate of Third point of tringle 
// x3=(x2-x1)/2+x1; 
y2=y1-sqrt(pow((x2-x1),2)-pow((x2-x1)/2,2)); // y-coordinate of Third point of 
tringle 
drawline(x1,y1,x2,y1); 
drawline(x2,y1,x3,y2); 
drawline(x1,y1,x3,y2); 
x=x3; // x-coordinate of center of a circle 
y=y2+2*(y1-y2)/3; // y-coordinate of center of a circle 
r=(y1-y2)/3; //Radius of inner circle 
drawcircle(x,y,r); 
r=2*(y1-y2)/3; //Radius of outer circle 
drawcircle(x,y,r); 
delay(50000); 
closegraph(); 
return 0; 
}























/*DDA Line Drawing:
It is Digital Differential Analyzer (DDA).
It is also called as Vector generation line drawing algorithm.
Here we solve the differential equation for straight line. For drawing a line we need to turn ON the pixels which are on the line segment. For this we consider the slope of line.
Algorithm:
DDA line(Draw a figure)
Read the line endpoints (X1, Y1) and (X2, Y2) such that they are not equal.
1) Calculate
dx = X2 – X1 dy = Y2 –Y1
2) if (dx >dy) then step = dx
else
end if
step = dy
3) Xin = dx / step Yinc = dx / step
4) put pixel (X1, Y1,1) x = X1
y = Y1
5) i = 1
while (i <= step)
{
put pixel( x, ,y 1) x = x + dx
y = y + dy
i = i + 1
}
Bresenham’s Line Drawing: (Draw a figure) Principle:
Either x or y is incremented by one unit depending on slope of line and increment in other variable is determined by checking the distance between true line segment and nearest pixel. This distance is called as decision variable.
Initially this decision variable s set as e = 2 * dy - dx.
Algorithm:
1) Read the line endpoints (X1, Y1) and (X2, Y2) such that they are not equal.
2) Calculate
dx = X2 – X1 dy = Y2 – Y1
3) Initialize
x = X1
y = Y1
4) Calculate decision variable e = 2 * dy – dx
5) i = 1
put pixel ( x, y,1)
6) while ( e >= 0)
{
y = y + 1
e = e – 2 * dx
}
x = x + 1
e = e + 2 * dy
7) i = 1
8) if ( i <= dx) then go to step
9) Stop.*/
